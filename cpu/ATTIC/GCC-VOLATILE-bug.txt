00010328 <uart0_blocking_getchar>:
   10328:	8241a603          	lw	a2,-2012(gp) # 10a1c <g_rx_streambuf_prod>
   1032c:	81c1a683          	lw	a3,-2020(gp) # 10a14 <g_rx_streambuf_cons>
   10330:	81c18713          	addi	a4,gp,-2020 # 10a14 <g_rx_streambuf_cons>
   10334:	02d60a63          	beq	a2,a3,10368 <uart0_blocking_getchar+0x40>
   10338:	00100793          	li	a5,1
   1033c:	88279073          	csrw	0x882,a5
   10340:	0006c503          	lbu	a0,0(a3)
   10344:	8281a603          	lw	a2,-2008(gp) # 10a20 <g_rx_streambuf_start>
   10348:	00168793          	addi	a5,a3,1
   1034c:	01479793          	slli	a5,a5,0x14
   10350:	0147d793          	srli	a5,a5,0x14
   10354:	0ff57513          	andi	a0,a0,255
   10358:	00d7f463          	bgeu	a5,a3,10360 <uart0_blocking_getchar+0x38>
   1035c:	00f607b3          	add	a5,a2,a5
   10360:	00f72023          	sw	a5,0(a4)
   10364:	00008067          	ret
   10368:	c01027f3          	rdtime	a5
   1036c:	0167d793          	srli	a5,a5,0x16
   10370:	0017f793          	andi	a5,a5,1
   10374:	00079073          	csrw	ustatus,a5
   10378:	fbdff06f          	j	10334 <uart0_blocking_getchar+0xc>


BUG -- g_rx_streambuf_prod and g_rx_streambuf_cons are both volatile
unsigned char* pointers but the asm code generated for the while test
does not reload their values on each iteration -- in our case causing the
changes made to g_rx_streambuf_prod by the ISR routine to not be seen by 
this routine (uart0_blocking_getchar).

int
uart0_blocking_getchar()
{
    unsigned int c;

    while (g_rx_streambuf_prod == g_rx_streambuf_cons)
        gpio_set_dummy((rdtime() >> 22) & 1);

    gpio_set_out(1);

    c = *g_rx_streambuf_cons;
    g_rx_streambuf_cons = 
        streambuf_incr((unsigned int) g_rx_streambuf_start, 
                       (unsigned int) g_rx_streambuf_cons, 
                       1);
    return c;
}
