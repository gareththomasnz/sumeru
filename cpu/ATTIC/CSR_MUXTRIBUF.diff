diff --git a/cpu/Makefile b/cpu/Makefile
index 0d61411..29f243e 100644
--- a/cpu/Makefile
+++ b/cpu/Makefile
@@ -11,6 +11,8 @@ SRCS = sumeru_constants.vhd \
         ram1p_256x16.vhd \
         ram1p_256x36_byteena.vhd \
         ram2p_simp_32x32.vhd \
+        mux_2x32.vhd \
+        mux_8x32.vhd \
         memory_arbitrator.vhd \
         memory_loader.vhd \
         readcache_256x4x32.vhd \
diff --git a/cpu/cpu.qsf b/cpu/cpu.qsf
index e2e878a..5357020 100644
--- a/cpu/cpu.qsf
+++ b/cpu/cpu.qsf
@@ -39,6 +39,8 @@ set_global_assignment -name VHDL_FILE ../sw/vhdl/libsrc/ram1p_256x32.vhd
 set_global_assignment -name VHDL_FILE ../sw/vhdl/libsrc/ram1p_256x36_byteena.vhd
 set_global_assignment -name VHDL_FILE ../sw/vhdl/libsrc/ram1p_256x16.vhd
 set_global_assignment -name VHDL_FILE ../sw/vhdl/libsrc/ram2p_simp_32x32.vhd
+set_global_assignment -name VHDL_FILE mux_2x32.vhd
+set_global_assignment -name VHDL_FILE mux_8x32.vhd
 set_global_assignment -name VHDL_FILE cpu_types.vhd
 set_global_assignment -name VHDL_FILE memory_channel_types.vhd
 set_global_assignment -name VHDL_FILE memory_arbitrator.vhd
diff --git a/cpu/csr_counters.vhd b/cpu/csr_counters.vhd
index 54de58d..c915494 100644
--- a/cpu/csr_counters.vhd
+++ b/cpu/csr_counters.vhd
@@ -1,7 +1,7 @@
 library ieee, lpm;
 use ieee.std_logic_1164.ALL;
 use ieee.numeric_std.ALL;
-use lpm.lpm_components.lpm_counter;
+use lpm.lpm_components.ALL;
 
 use work.sumeru_constants.ALL;
 use work.cpu_types.ALL;
@@ -20,9 +20,13 @@ port(
 end entity;
 
 architecture synth of csr_counters is
-    signal ctx_pc_switch_r:     std_logic_vector(31 downto 0) := (others => '0');
     signal ctr_instret:         std_logic_vector(63 downto 0);
     signal ctr_cycle:           std_logic_vector(63 downto 0);
+    signal ctr_time:            std_logic_vector(63 downto 0);
+    signal ctx_pc_switch_r:     std_logic_vector(31 downto 0) := (others => '0');
+    signal module_sel:          std_logic;
+    signal reg_sel:             std_logic_vector(2 downto 0);
+    signal sel_result:          std_logic_vector(31 downto 0);
 begin
 
 ctx_pc_switch <= ctx_pc_switch_r;
@@ -43,9 +47,37 @@ cycle_counter: lpm_counter
         aclr => reset,
         q => ctr_cycle);
 
-csr_sel_result <=
-    ctx_pc_save   when csr_in.csr_sel_reg = CSR_REG_CTX_PCSAVE else
-    "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
+time_counter: lpm_counter
+    generic map(
+        LPM_WIDTH => 64)
+    port map(
+        clock => clk,
+        aclr => reset,
+        q => ctr_time);
+
+module_sel <= '1' when csr_in.csr_sel_reg(11 downto 8) = x"C" else '0';
+reg_sel <= csr_in.csr_sel_reg(7) & csr_in.csr_sel_reg(1 downto 0);
+
+csr_sel_mux: entity work.mux_8x32
+    port map(
+        data0x => ctr_instret(31 downto 0),
+        data1x => ctr_instret(63 downto 32),
+        data2x => ctr_time(31 downto 0),
+        data3x => ctx_pc_save,
+        data4x => ctr_time(63 downto 32),
+        data5x => ctr_cycle(31 downto 0),
+        data6x => ctr_cycle(63 downto 32),
+        data7x => ctx_pc_switch_r,
+        sel => reg_sel,
+        result => sel_result);
+
+csr_bustri: lpm_bustri
+    generic map(
+        LPM_WIDTH => 32)
+    port map(
+        data => sel_result,
+        enabledt => module_sel,
+        tridata => csr_sel_result);
 
 process(clk)
 begin
diff --git a/cpu/csr_gpio.vhd b/cpu/csr_gpio.vhd
index 8ac076c..4b369ad 100644
--- a/cpu/csr_gpio.vhd
+++ b/cpu/csr_gpio.vhd
@@ -1,6 +1,7 @@
-library ieee;
+library ieee, lpm;
 use ieee.std_logic_1164.ALL;
 use ieee.numeric_std.ALL;
+use lpm.lpm_components.ALL;
 
 use work.sumeru_constants.ALL;
 use work.cpu_types.ALL;
@@ -17,18 +18,32 @@ end entity;
 architecture synth of csr_gpio is
     signal reg_output:          std_logic_vector(31 downto 0) := (others => '0');
     signal reg_dir:             std_logic_vector(31 downto 0) := (others => '0');
+    signal module_sel:          std_logic;
+    signal reg_sel:             std_logic;
+    signal sel_result:          std_logic_vector(31 downto 0);
 begin
 
 OUTPUTS: for I in 0 to 31 generate
     gpio(I) <= reg_output(I) when reg_dir(I) = '1' else 'Z';
 end generate OUTPUTS;
 
-
-csr_sel_result <=
-    reg_dir when csr_in.csr_sel_reg = CSR_REG_GPIO_DIR else
-    reg_output when csr_in.csr_sel_reg = CSR_REG_GPIO_OUTPUT else
-    gpio when csr_in.csr_sel_reg = CSR_REG_GPIO_INPUT else
-    "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
+module_sel <= '1' when csr_in.csr_sel_reg(11 downto 8) = x"8" else '0';
+reg_sel <= csr_in.csr_sel_reg(0);
+
+csr_sel_mux: entity work.mux_2x32
+    port map(
+        data0x => reg_dir,
+        data1x => gpio,
+        sel => reg_sel,
+        result => sel_result);
+
+csr_bustri: lpm_bustri
+    generic map(
+        LPM_WIDTH => 32)
+    port map(
+        data => sel_result,
+        enabledt => module_sel,
+        tridata => csr_sel_result);
 
 process(clk)
 begin
diff --git a/cpu/csr_misc.vhd b/cpu/csr_misc.vhd
index bd4182b..e91ccfe 100644
--- a/cpu/csr_misc.vhd
+++ b/cpu/csr_misc.vhd
@@ -1,6 +1,7 @@
-library ieee;
+library ieee, lpm;
 use ieee.std_logic_1164.ALL;
 use ieee.numeric_std.ALL;
+use lpm.lpm_components.ALL;
 
 use work.sumeru_constants.ALL;
 use work.cpu_types.ALL;
@@ -9,23 +10,25 @@ entity csr_misc is
 port(
     clk:                        in std_logic;
     csr_in:                     in csr_channel_in_t;
+    csr_sel_result:             inout std_logic_vector(31 downto 0);
     ivector_addr:               out std_logic_vector(23 downto 0)
     );
 end entity;
 
 architecture synth of csr_misc is
-    signal ivector_addr_r:      std_logic_vector(31 downto 0) := (others => '0');
+    signal module_sel:          std_logic;
+    signal ivector_addr_r:      std_logic_vector(23 downto 0);
 begin
 
-ivector_addr <= ivector_addr_r(31 downto 8);
+ivector_addr <= ivector_addr_r;
 
 process(clk)
 begin
     if (rising_edge(clk)) then
-        if (csr_in.csr_op_valid = '1' and 
+        if (csr_in.csr_op_valid = '1' and
             csr_in.csr_op_reg = CSR_REG_IVECTOR_ADDR) 
         then
-            ivector_addr_r <= csr_in.csr_op_data;
+            ivector_addr_r <= csr_in.csr_op_data(31 downto 8);
         end if;
     end if;
 end process;
diff --git a/cpu/csr_timer.vhd b/cpu/csr_timer.vhd
index 8d30d5f..ccbd3d0 100644
--- a/cpu/csr_timer.vhd
+++ b/cpu/csr_timer.vhd
@@ -1,6 +1,7 @@
-library work, ieee;
+library ieee, lpm;
 use ieee.std_logic_1164.all;
 use ieee.numeric_std.all;
+use lpm.lpm_components.ALL;
 
 use work.sumeru_constants.ALL;
 use work.cpu_types.all;
@@ -20,12 +21,29 @@ architecture synth of csr_timer is
     signal intr_trigger_r:      std_logic := '0';
     alias timer_enabled:        std_logic is timer_ctrl(0);
     alias timer_max_count:      std_logic_vector(31 downto 4) is timer_ctrl(31 downto 4);
+
+    signal module_sel:          std_logic;
+    signal reg_sel:             std_logic;
+    signal sel_result:          std_logic_vector(31 downto 0);
 begin
 
-csr_sel_result <=
-    timer_ctrl when csr_in.csr_sel_reg = CSR_REG_TIMER_CTRL else
-    timer_value when csr_in.csr_sel_reg = CSR_REG_TIMER_VALUE else
-    "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
+module_sel <= '1' when csr_in.csr_sel_reg(11 downto 8) = x"A" else '0';
+reg_sel <= csr_in.csr_sel_reg(0);
+
+csr_sel_mux: entity work.mux_2x32
+    port map(
+        data0x => timer_ctrl,
+        data1x => timer_value,
+        sel => reg_sel,
+        result => sel_result);
+
+csr_bustri: lpm_bustri
+    generic map(
+        LPM_WIDTH => 32)
+    port map(
+        data => (others => '0'),
+        enabledt => module_sel,
+        tridata => csr_sel_result);
 
 intr_trigger <= intr_trigger_r;
 
diff --git a/cpu/csr_uart_rs232.vhd b/cpu/csr_uart_rs232.vhd
index 324873e..67cee3e 100644
--- a/cpu/csr_uart_rs232.vhd
+++ b/cpu/csr_uart_rs232.vhd
@@ -1,8 +1,7 @@
 library ieee, lpm;
 use ieee.std_logic_1164.ALL;
 use ieee.numeric_std.ALL;
-use lpm.lpm_components.lpm_counter;
-use lpm.lpm_components.lpm_shiftreg;
+use lpm.lpm_components.ALL;
 
 use work.sumeru_constants.ALL;
 use work.cpu_types.ALL;
@@ -24,6 +23,14 @@ port(
 end entity;
 
 architecture synth of csr_uart_rs232 is
+signal module_sel:              std_logic;
+signal reg_sel:                 std_logic;
+signal sel_result:              std_logic_vector(31 downto 0);
+
+
+signal rx_reg:                  std_logic_vector(31 downto 0);
+signal tx_reg:                  std_logic_vector(31 downto 0);
+
 signal tx_ctrl:                 std_logic_vector(23 downto 0) := (others => '0');
 signal tx_buf_len:              std_logic_vector(7 downto 0) := (others => '0');
 signal tx_buf_curpos:           std_logic_vector(7 downto 0) := (others => '0');
@@ -81,10 +88,26 @@ begin
 pdma_in.read <= read_r;
 pdma_in.write <= write_r;
 
-csr_sel_result <=
-    (rx_ctrl & rx_buf_curpos) when csr_in.csr_sel_reg = CSR_REG_UART0_RX else
-    (tx_ctrl & tx_buf_curpos) when csr_in.csr_sel_reg = CSR_REG_UART0_TX else
-    "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
+module_sel <= '1' when csr_in.csr_sel_reg(11 downto 8) = x"9" else '0';
+reg_sel <= csr_in.csr_sel_reg(0);
+
+rx_reg <= (rx_ctrl & rx_buf_curpos);
+tx_reg <= (tx_ctrl & tx_buf_curpos);
+
+csr_sel_mux: entity work.mux_2x32
+    port map(
+        data0x => rx_reg,
+        data1x => tx_reg,
+        sel => reg_sel,
+        result => sel_result);
+
+csr_bustri: lpm_bustri
+    generic map(
+        LPM_WIDTH => 32)
+    port map(
+        data => sel_result,
+        enabledt => module_sel,
+        tridata => csr_sel_result);
 
 tx_intr_toggle <= tx_intr_toggle_r;
 rx_intr_toggle <= rx_intr_toggle_r;
diff --git a/cpu/mux_2x32.vhd b/cpu/mux_2x32.vhd
new file mode 100644
index 0000000..dd41675
--- /dev/null
+++ b/cpu/mux_2x32.vhd
@@ -0,0 +1,177 @@
+-- megafunction wizard: %LPM_MUX%
+-- GENERATION: STANDARD
+-- VERSION: WM1.0
+-- MODULE: LPM_MUX 
+
+-- ============================================================
+-- File Name: mux_2x32.vhd
+-- Megafunction Name(s):
+-- 			LPM_MUX
+--
+-- Simulation Library Files(s):
+-- 			lpm
+-- ============================================================
+-- ************************************************************
+-- THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
+--
+-- 14.1.0 Build 186 12/03/2014 Patches 0.19 SJ Web Edition
+-- ************************************************************
+
+
+--Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
+--Your use of Altera Corporation's design tools, logic functions 
+--and other software and tools, and its AMPP partner logic 
+--functions, and any output files from any of the foregoing 
+--(including device programming or simulation files), and any 
+--associated documentation or information are expressly subject 
+--to the terms and conditions of the Altera Program License 
+--Subscription Agreement, the Altera Quartus II License Agreement,
+--the Altera MegaCore Function License Agreement, or other 
+--applicable license agreement, including, without limitation, 
+--that your use is for the sole purpose of programming logic 
+--devices manufactured by Altera and sold by Altera or its 
+--authorized distributors.  Please refer to the applicable 
+--agreement for further details.
+
+
+LIBRARY ieee;
+USE ieee.std_logic_1164.all;
+
+LIBRARY lpm;
+USE lpm.lpm_components.all;
+
+ENTITY mux_2x32 IS
+	PORT
+	(
+		data0x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data1x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		sel		: IN STD_LOGIC ;
+		result		: OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
+	);
+END mux_2x32;
+
+
+ARCHITECTURE SYN OF mux_2x32 IS
+
+--	type STD_LOGIC_2D is array (NATURAL RANGE <>, NATURAL RANGE <>) of STD_LOGIC;
+
+	SIGNAL sub_wire0	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire1	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire2	: STD_LOGIC_2D (1 DOWNTO 0, 31 DOWNTO 0);
+	SIGNAL sub_wire3	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire4	: STD_LOGIC ;
+	SIGNAL sub_wire5	: STD_LOGIC_VECTOR (0 DOWNTO 0);
+
+BEGIN
+	sub_wire3    <= data0x(31 DOWNTO 0);
+	result    <= sub_wire0(31 DOWNTO 0);
+	sub_wire1    <= data1x(31 DOWNTO 0);
+	sub_wire2(1, 0)    <= sub_wire1(0);
+	sub_wire2(1, 1)    <= sub_wire1(1);
+	sub_wire2(1, 2)    <= sub_wire1(2);
+	sub_wire2(1, 3)    <= sub_wire1(3);
+	sub_wire2(1, 4)    <= sub_wire1(4);
+	sub_wire2(1, 5)    <= sub_wire1(5);
+	sub_wire2(1, 6)    <= sub_wire1(6);
+	sub_wire2(1, 7)    <= sub_wire1(7);
+	sub_wire2(1, 8)    <= sub_wire1(8);
+	sub_wire2(1, 9)    <= sub_wire1(9);
+	sub_wire2(1, 10)    <= sub_wire1(10);
+	sub_wire2(1, 11)    <= sub_wire1(11);
+	sub_wire2(1, 12)    <= sub_wire1(12);
+	sub_wire2(1, 13)    <= sub_wire1(13);
+	sub_wire2(1, 14)    <= sub_wire1(14);
+	sub_wire2(1, 15)    <= sub_wire1(15);
+	sub_wire2(1, 16)    <= sub_wire1(16);
+	sub_wire2(1, 17)    <= sub_wire1(17);
+	sub_wire2(1, 18)    <= sub_wire1(18);
+	sub_wire2(1, 19)    <= sub_wire1(19);
+	sub_wire2(1, 20)    <= sub_wire1(20);
+	sub_wire2(1, 21)    <= sub_wire1(21);
+	sub_wire2(1, 22)    <= sub_wire1(22);
+	sub_wire2(1, 23)    <= sub_wire1(23);
+	sub_wire2(1, 24)    <= sub_wire1(24);
+	sub_wire2(1, 25)    <= sub_wire1(25);
+	sub_wire2(1, 26)    <= sub_wire1(26);
+	sub_wire2(1, 27)    <= sub_wire1(27);
+	sub_wire2(1, 28)    <= sub_wire1(28);
+	sub_wire2(1, 29)    <= sub_wire1(29);
+	sub_wire2(1, 30)    <= sub_wire1(30);
+	sub_wire2(1, 31)    <= sub_wire1(31);
+	sub_wire2(0, 0)    <= sub_wire3(0);
+	sub_wire2(0, 1)    <= sub_wire3(1);
+	sub_wire2(0, 2)    <= sub_wire3(2);
+	sub_wire2(0, 3)    <= sub_wire3(3);
+	sub_wire2(0, 4)    <= sub_wire3(4);
+	sub_wire2(0, 5)    <= sub_wire3(5);
+	sub_wire2(0, 6)    <= sub_wire3(6);
+	sub_wire2(0, 7)    <= sub_wire3(7);
+	sub_wire2(0, 8)    <= sub_wire3(8);
+	sub_wire2(0, 9)    <= sub_wire3(9);
+	sub_wire2(0, 10)    <= sub_wire3(10);
+	sub_wire2(0, 11)    <= sub_wire3(11);
+	sub_wire2(0, 12)    <= sub_wire3(12);
+	sub_wire2(0, 13)    <= sub_wire3(13);
+	sub_wire2(0, 14)    <= sub_wire3(14);
+	sub_wire2(0, 15)    <= sub_wire3(15);
+	sub_wire2(0, 16)    <= sub_wire3(16);
+	sub_wire2(0, 17)    <= sub_wire3(17);
+	sub_wire2(0, 18)    <= sub_wire3(18);
+	sub_wire2(0, 19)    <= sub_wire3(19);
+	sub_wire2(0, 20)    <= sub_wire3(20);
+	sub_wire2(0, 21)    <= sub_wire3(21);
+	sub_wire2(0, 22)    <= sub_wire3(22);
+	sub_wire2(0, 23)    <= sub_wire3(23);
+	sub_wire2(0, 24)    <= sub_wire3(24);
+	sub_wire2(0, 25)    <= sub_wire3(25);
+	sub_wire2(0, 26)    <= sub_wire3(26);
+	sub_wire2(0, 27)    <= sub_wire3(27);
+	sub_wire2(0, 28)    <= sub_wire3(28);
+	sub_wire2(0, 29)    <= sub_wire3(29);
+	sub_wire2(0, 30)    <= sub_wire3(30);
+	sub_wire2(0, 31)    <= sub_wire3(31);
+	sub_wire4    <= sel;
+	sub_wire5(0)    <= sub_wire4;
+
+	LPM_MUX_component : LPM_MUX
+	GENERIC MAP (
+		lpm_size => 2,
+		lpm_type => "LPM_MUX",
+		lpm_width => 32,
+		lpm_widths => 1
+	)
+	PORT MAP (
+		data => sub_wire2,
+		sel => sub_wire5,
+		result => sub_wire0
+	);
+
+
+
+END SYN;
+
+-- ============================================================
+-- CNX file retrieval info
+-- ============================================================
+-- Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
+-- Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
+-- Retrieval info: PRIVATE: new_diagram STRING "1"
+-- Retrieval info: LIBRARY: lpm lpm.lpm_components.all
+-- Retrieval info: CONSTANT: LPM_SIZE NUMERIC "2"
+-- Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MUX"
+-- Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "32"
+-- Retrieval info: CONSTANT: LPM_WIDTHS NUMERIC "1"
+-- Retrieval info: USED_PORT: data0x 0 0 32 0 INPUT NODEFVAL "data0x[31..0]"
+-- Retrieval info: USED_PORT: data1x 0 0 32 0 INPUT NODEFVAL "data1x[31..0]"
+-- Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
+-- Retrieval info: USED_PORT: sel 0 0 0 0 INPUT NODEFVAL "sel"
+-- Retrieval info: CONNECT: @data 1 0 32 0 data0x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 1 32 0 data1x 0 0 32 0
+-- Retrieval info: CONNECT: @sel 0 0 1 0 sel 0 0 0 0
+-- Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_2x32.vhd TRUE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_2x32.inc FALSE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_2x32.cmp TRUE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_2x32.bsf FALSE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_2x32_inst.vhd FALSE
+-- Retrieval info: LIB_FILE: lpm
diff --git a/cpu/mux_8x32.vhd b/cpu/mux_8x32.vhd
new file mode 100644
index 0000000..0ac3166
--- /dev/null
+++ b/cpu/mux_8x32.vhd
@@ -0,0 +1,395 @@
+-- megafunction wizard: %LPM_MUX%
+-- GENERATION: STANDARD
+-- VERSION: WM1.0
+-- MODULE: LPM_MUX 
+
+-- ============================================================
+-- File Name: mux_8x32.vhd
+-- Megafunction Name(s):
+-- 			LPM_MUX
+--
+-- Simulation Library Files(s):
+-- 			lpm
+-- ============================================================
+-- ************************************************************
+-- THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
+--
+-- 14.1.0 Build 186 12/03/2014 Patches 0.19 SJ Web Edition
+-- ************************************************************
+
+
+--Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
+--Your use of Altera Corporation's design tools, logic functions 
+--and other software and tools, and its AMPP partner logic 
+--functions, and any output files from any of the foregoing 
+--(including device programming or simulation files), and any 
+--associated documentation or information are expressly subject 
+--to the terms and conditions of the Altera Program License 
+--Subscription Agreement, the Altera Quartus II License Agreement,
+--the Altera MegaCore Function License Agreement, or other 
+--applicable license agreement, including, without limitation, 
+--that your use is for the sole purpose of programming logic 
+--devices manufactured by Altera and sold by Altera or its 
+--authorized distributors.  Please refer to the applicable 
+--agreement for further details.
+
+
+LIBRARY ieee;
+USE ieee.std_logic_1164.all;
+
+LIBRARY lpm;
+USE lpm.lpm_components.all;
+
+ENTITY mux_8x32 IS
+	PORT
+	(
+		data0x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data1x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data2x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data3x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data4x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data5x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data6x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		data7x		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
+		sel		: IN STD_LOGIC_VECTOR (2 DOWNTO 0);
+		result		: OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
+	);
+END mux_8x32;
+
+
+ARCHITECTURE SYN OF mux_8x32 IS
+
+--	type STD_LOGIC_2D is array (NATURAL RANGE <>, NATURAL RANGE <>) of STD_LOGIC;
+
+	SIGNAL sub_wire0	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire1	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire2	: STD_LOGIC_2D (7 DOWNTO 0, 31 DOWNTO 0);
+	SIGNAL sub_wire3	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire4	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire5	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire6	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire7	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire8	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+	SIGNAL sub_wire9	: STD_LOGIC_VECTOR (31 DOWNTO 0);
+
+BEGIN
+	sub_wire9    <= data0x(31 DOWNTO 0);
+	sub_wire8    <= data1x(31 DOWNTO 0);
+	sub_wire7    <= data2x(31 DOWNTO 0);
+	sub_wire6    <= data3x(31 DOWNTO 0);
+	sub_wire5    <= data4x(31 DOWNTO 0);
+	sub_wire4    <= data5x(31 DOWNTO 0);
+	sub_wire3    <= data6x(31 DOWNTO 0);
+	result    <= sub_wire0(31 DOWNTO 0);
+	sub_wire1    <= data7x(31 DOWNTO 0);
+	sub_wire2(7, 0)    <= sub_wire1(0);
+	sub_wire2(7, 1)    <= sub_wire1(1);
+	sub_wire2(7, 2)    <= sub_wire1(2);
+	sub_wire2(7, 3)    <= sub_wire1(3);
+	sub_wire2(7, 4)    <= sub_wire1(4);
+	sub_wire2(7, 5)    <= sub_wire1(5);
+	sub_wire2(7, 6)    <= sub_wire1(6);
+	sub_wire2(7, 7)    <= sub_wire1(7);
+	sub_wire2(7, 8)    <= sub_wire1(8);
+	sub_wire2(7, 9)    <= sub_wire1(9);
+	sub_wire2(7, 10)    <= sub_wire1(10);
+	sub_wire2(7, 11)    <= sub_wire1(11);
+	sub_wire2(7, 12)    <= sub_wire1(12);
+	sub_wire2(7, 13)    <= sub_wire1(13);
+	sub_wire2(7, 14)    <= sub_wire1(14);
+	sub_wire2(7, 15)    <= sub_wire1(15);
+	sub_wire2(7, 16)    <= sub_wire1(16);
+	sub_wire2(7, 17)    <= sub_wire1(17);
+	sub_wire2(7, 18)    <= sub_wire1(18);
+	sub_wire2(7, 19)    <= sub_wire1(19);
+	sub_wire2(7, 20)    <= sub_wire1(20);
+	sub_wire2(7, 21)    <= sub_wire1(21);
+	sub_wire2(7, 22)    <= sub_wire1(22);
+	sub_wire2(7, 23)    <= sub_wire1(23);
+	sub_wire2(7, 24)    <= sub_wire1(24);
+	sub_wire2(7, 25)    <= sub_wire1(25);
+	sub_wire2(7, 26)    <= sub_wire1(26);
+	sub_wire2(7, 27)    <= sub_wire1(27);
+	sub_wire2(7, 28)    <= sub_wire1(28);
+	sub_wire2(7, 29)    <= sub_wire1(29);
+	sub_wire2(7, 30)    <= sub_wire1(30);
+	sub_wire2(7, 31)    <= sub_wire1(31);
+	sub_wire2(6, 0)    <= sub_wire3(0);
+	sub_wire2(6, 1)    <= sub_wire3(1);
+	sub_wire2(6, 2)    <= sub_wire3(2);
+	sub_wire2(6, 3)    <= sub_wire3(3);
+	sub_wire2(6, 4)    <= sub_wire3(4);
+	sub_wire2(6, 5)    <= sub_wire3(5);
+	sub_wire2(6, 6)    <= sub_wire3(6);
+	sub_wire2(6, 7)    <= sub_wire3(7);
+	sub_wire2(6, 8)    <= sub_wire3(8);
+	sub_wire2(6, 9)    <= sub_wire3(9);
+	sub_wire2(6, 10)    <= sub_wire3(10);
+	sub_wire2(6, 11)    <= sub_wire3(11);
+	sub_wire2(6, 12)    <= sub_wire3(12);
+	sub_wire2(6, 13)    <= sub_wire3(13);
+	sub_wire2(6, 14)    <= sub_wire3(14);
+	sub_wire2(6, 15)    <= sub_wire3(15);
+	sub_wire2(6, 16)    <= sub_wire3(16);
+	sub_wire2(6, 17)    <= sub_wire3(17);
+	sub_wire2(6, 18)    <= sub_wire3(18);
+	sub_wire2(6, 19)    <= sub_wire3(19);
+	sub_wire2(6, 20)    <= sub_wire3(20);
+	sub_wire2(6, 21)    <= sub_wire3(21);
+	sub_wire2(6, 22)    <= sub_wire3(22);
+	sub_wire2(6, 23)    <= sub_wire3(23);
+	sub_wire2(6, 24)    <= sub_wire3(24);
+	sub_wire2(6, 25)    <= sub_wire3(25);
+	sub_wire2(6, 26)    <= sub_wire3(26);
+	sub_wire2(6, 27)    <= sub_wire3(27);
+	sub_wire2(6, 28)    <= sub_wire3(28);
+	sub_wire2(6, 29)    <= sub_wire3(29);
+	sub_wire2(6, 30)    <= sub_wire3(30);
+	sub_wire2(6, 31)    <= sub_wire3(31);
+	sub_wire2(5, 0)    <= sub_wire4(0);
+	sub_wire2(5, 1)    <= sub_wire4(1);
+	sub_wire2(5, 2)    <= sub_wire4(2);
+	sub_wire2(5, 3)    <= sub_wire4(3);
+	sub_wire2(5, 4)    <= sub_wire4(4);
+	sub_wire2(5, 5)    <= sub_wire4(5);
+	sub_wire2(5, 6)    <= sub_wire4(6);
+	sub_wire2(5, 7)    <= sub_wire4(7);
+	sub_wire2(5, 8)    <= sub_wire4(8);
+	sub_wire2(5, 9)    <= sub_wire4(9);
+	sub_wire2(5, 10)    <= sub_wire4(10);
+	sub_wire2(5, 11)    <= sub_wire4(11);
+	sub_wire2(5, 12)    <= sub_wire4(12);
+	sub_wire2(5, 13)    <= sub_wire4(13);
+	sub_wire2(5, 14)    <= sub_wire4(14);
+	sub_wire2(5, 15)    <= sub_wire4(15);
+	sub_wire2(5, 16)    <= sub_wire4(16);
+	sub_wire2(5, 17)    <= sub_wire4(17);
+	sub_wire2(5, 18)    <= sub_wire4(18);
+	sub_wire2(5, 19)    <= sub_wire4(19);
+	sub_wire2(5, 20)    <= sub_wire4(20);
+	sub_wire2(5, 21)    <= sub_wire4(21);
+	sub_wire2(5, 22)    <= sub_wire4(22);
+	sub_wire2(5, 23)    <= sub_wire4(23);
+	sub_wire2(5, 24)    <= sub_wire4(24);
+	sub_wire2(5, 25)    <= sub_wire4(25);
+	sub_wire2(5, 26)    <= sub_wire4(26);
+	sub_wire2(5, 27)    <= sub_wire4(27);
+	sub_wire2(5, 28)    <= sub_wire4(28);
+	sub_wire2(5, 29)    <= sub_wire4(29);
+	sub_wire2(5, 30)    <= sub_wire4(30);
+	sub_wire2(5, 31)    <= sub_wire4(31);
+	sub_wire2(4, 0)    <= sub_wire5(0);
+	sub_wire2(4, 1)    <= sub_wire5(1);
+	sub_wire2(4, 2)    <= sub_wire5(2);
+	sub_wire2(4, 3)    <= sub_wire5(3);
+	sub_wire2(4, 4)    <= sub_wire5(4);
+	sub_wire2(4, 5)    <= sub_wire5(5);
+	sub_wire2(4, 6)    <= sub_wire5(6);
+	sub_wire2(4, 7)    <= sub_wire5(7);
+	sub_wire2(4, 8)    <= sub_wire5(8);
+	sub_wire2(4, 9)    <= sub_wire5(9);
+	sub_wire2(4, 10)    <= sub_wire5(10);
+	sub_wire2(4, 11)    <= sub_wire5(11);
+	sub_wire2(4, 12)    <= sub_wire5(12);
+	sub_wire2(4, 13)    <= sub_wire5(13);
+	sub_wire2(4, 14)    <= sub_wire5(14);
+	sub_wire2(4, 15)    <= sub_wire5(15);
+	sub_wire2(4, 16)    <= sub_wire5(16);
+	sub_wire2(4, 17)    <= sub_wire5(17);
+	sub_wire2(4, 18)    <= sub_wire5(18);
+	sub_wire2(4, 19)    <= sub_wire5(19);
+	sub_wire2(4, 20)    <= sub_wire5(20);
+	sub_wire2(4, 21)    <= sub_wire5(21);
+	sub_wire2(4, 22)    <= sub_wire5(22);
+	sub_wire2(4, 23)    <= sub_wire5(23);
+	sub_wire2(4, 24)    <= sub_wire5(24);
+	sub_wire2(4, 25)    <= sub_wire5(25);
+	sub_wire2(4, 26)    <= sub_wire5(26);
+	sub_wire2(4, 27)    <= sub_wire5(27);
+	sub_wire2(4, 28)    <= sub_wire5(28);
+	sub_wire2(4, 29)    <= sub_wire5(29);
+	sub_wire2(4, 30)    <= sub_wire5(30);
+	sub_wire2(4, 31)    <= sub_wire5(31);
+	sub_wire2(3, 0)    <= sub_wire6(0);
+	sub_wire2(3, 1)    <= sub_wire6(1);
+	sub_wire2(3, 2)    <= sub_wire6(2);
+	sub_wire2(3, 3)    <= sub_wire6(3);
+	sub_wire2(3, 4)    <= sub_wire6(4);
+	sub_wire2(3, 5)    <= sub_wire6(5);
+	sub_wire2(3, 6)    <= sub_wire6(6);
+	sub_wire2(3, 7)    <= sub_wire6(7);
+	sub_wire2(3, 8)    <= sub_wire6(8);
+	sub_wire2(3, 9)    <= sub_wire6(9);
+	sub_wire2(3, 10)    <= sub_wire6(10);
+	sub_wire2(3, 11)    <= sub_wire6(11);
+	sub_wire2(3, 12)    <= sub_wire6(12);
+	sub_wire2(3, 13)    <= sub_wire6(13);
+	sub_wire2(3, 14)    <= sub_wire6(14);
+	sub_wire2(3, 15)    <= sub_wire6(15);
+	sub_wire2(3, 16)    <= sub_wire6(16);
+	sub_wire2(3, 17)    <= sub_wire6(17);
+	sub_wire2(3, 18)    <= sub_wire6(18);
+	sub_wire2(3, 19)    <= sub_wire6(19);
+	sub_wire2(3, 20)    <= sub_wire6(20);
+	sub_wire2(3, 21)    <= sub_wire6(21);
+	sub_wire2(3, 22)    <= sub_wire6(22);
+	sub_wire2(3, 23)    <= sub_wire6(23);
+	sub_wire2(3, 24)    <= sub_wire6(24);
+	sub_wire2(3, 25)    <= sub_wire6(25);
+	sub_wire2(3, 26)    <= sub_wire6(26);
+	sub_wire2(3, 27)    <= sub_wire6(27);
+	sub_wire2(3, 28)    <= sub_wire6(28);
+	sub_wire2(3, 29)    <= sub_wire6(29);
+	sub_wire2(3, 30)    <= sub_wire6(30);
+	sub_wire2(3, 31)    <= sub_wire6(31);
+	sub_wire2(2, 0)    <= sub_wire7(0);
+	sub_wire2(2, 1)    <= sub_wire7(1);
+	sub_wire2(2, 2)    <= sub_wire7(2);
+	sub_wire2(2, 3)    <= sub_wire7(3);
+	sub_wire2(2, 4)    <= sub_wire7(4);
+	sub_wire2(2, 5)    <= sub_wire7(5);
+	sub_wire2(2, 6)    <= sub_wire7(6);
+	sub_wire2(2, 7)    <= sub_wire7(7);
+	sub_wire2(2, 8)    <= sub_wire7(8);
+	sub_wire2(2, 9)    <= sub_wire7(9);
+	sub_wire2(2, 10)    <= sub_wire7(10);
+	sub_wire2(2, 11)    <= sub_wire7(11);
+	sub_wire2(2, 12)    <= sub_wire7(12);
+	sub_wire2(2, 13)    <= sub_wire7(13);
+	sub_wire2(2, 14)    <= sub_wire7(14);
+	sub_wire2(2, 15)    <= sub_wire7(15);
+	sub_wire2(2, 16)    <= sub_wire7(16);
+	sub_wire2(2, 17)    <= sub_wire7(17);
+	sub_wire2(2, 18)    <= sub_wire7(18);
+	sub_wire2(2, 19)    <= sub_wire7(19);
+	sub_wire2(2, 20)    <= sub_wire7(20);
+	sub_wire2(2, 21)    <= sub_wire7(21);
+	sub_wire2(2, 22)    <= sub_wire7(22);
+	sub_wire2(2, 23)    <= sub_wire7(23);
+	sub_wire2(2, 24)    <= sub_wire7(24);
+	sub_wire2(2, 25)    <= sub_wire7(25);
+	sub_wire2(2, 26)    <= sub_wire7(26);
+	sub_wire2(2, 27)    <= sub_wire7(27);
+	sub_wire2(2, 28)    <= sub_wire7(28);
+	sub_wire2(2, 29)    <= sub_wire7(29);
+	sub_wire2(2, 30)    <= sub_wire7(30);
+	sub_wire2(2, 31)    <= sub_wire7(31);
+	sub_wire2(1, 0)    <= sub_wire8(0);
+	sub_wire2(1, 1)    <= sub_wire8(1);
+	sub_wire2(1, 2)    <= sub_wire8(2);
+	sub_wire2(1, 3)    <= sub_wire8(3);
+	sub_wire2(1, 4)    <= sub_wire8(4);
+	sub_wire2(1, 5)    <= sub_wire8(5);
+	sub_wire2(1, 6)    <= sub_wire8(6);
+	sub_wire2(1, 7)    <= sub_wire8(7);
+	sub_wire2(1, 8)    <= sub_wire8(8);
+	sub_wire2(1, 9)    <= sub_wire8(9);
+	sub_wire2(1, 10)    <= sub_wire8(10);
+	sub_wire2(1, 11)    <= sub_wire8(11);
+	sub_wire2(1, 12)    <= sub_wire8(12);
+	sub_wire2(1, 13)    <= sub_wire8(13);
+	sub_wire2(1, 14)    <= sub_wire8(14);
+	sub_wire2(1, 15)    <= sub_wire8(15);
+	sub_wire2(1, 16)    <= sub_wire8(16);
+	sub_wire2(1, 17)    <= sub_wire8(17);
+	sub_wire2(1, 18)    <= sub_wire8(18);
+	sub_wire2(1, 19)    <= sub_wire8(19);
+	sub_wire2(1, 20)    <= sub_wire8(20);
+	sub_wire2(1, 21)    <= sub_wire8(21);
+	sub_wire2(1, 22)    <= sub_wire8(22);
+	sub_wire2(1, 23)    <= sub_wire8(23);
+	sub_wire2(1, 24)    <= sub_wire8(24);
+	sub_wire2(1, 25)    <= sub_wire8(25);
+	sub_wire2(1, 26)    <= sub_wire8(26);
+	sub_wire2(1, 27)    <= sub_wire8(27);
+	sub_wire2(1, 28)    <= sub_wire8(28);
+	sub_wire2(1, 29)    <= sub_wire8(29);
+	sub_wire2(1, 30)    <= sub_wire8(30);
+	sub_wire2(1, 31)    <= sub_wire8(31);
+	sub_wire2(0, 0)    <= sub_wire9(0);
+	sub_wire2(0, 1)    <= sub_wire9(1);
+	sub_wire2(0, 2)    <= sub_wire9(2);
+	sub_wire2(0, 3)    <= sub_wire9(3);
+	sub_wire2(0, 4)    <= sub_wire9(4);
+	sub_wire2(0, 5)    <= sub_wire9(5);
+	sub_wire2(0, 6)    <= sub_wire9(6);
+	sub_wire2(0, 7)    <= sub_wire9(7);
+	sub_wire2(0, 8)    <= sub_wire9(8);
+	sub_wire2(0, 9)    <= sub_wire9(9);
+	sub_wire2(0, 10)    <= sub_wire9(10);
+	sub_wire2(0, 11)    <= sub_wire9(11);
+	sub_wire2(0, 12)    <= sub_wire9(12);
+	sub_wire2(0, 13)    <= sub_wire9(13);
+	sub_wire2(0, 14)    <= sub_wire9(14);
+	sub_wire2(0, 15)    <= sub_wire9(15);
+	sub_wire2(0, 16)    <= sub_wire9(16);
+	sub_wire2(0, 17)    <= sub_wire9(17);
+	sub_wire2(0, 18)    <= sub_wire9(18);
+	sub_wire2(0, 19)    <= sub_wire9(19);
+	sub_wire2(0, 20)    <= sub_wire9(20);
+	sub_wire2(0, 21)    <= sub_wire9(21);
+	sub_wire2(0, 22)    <= sub_wire9(22);
+	sub_wire2(0, 23)    <= sub_wire9(23);
+	sub_wire2(0, 24)    <= sub_wire9(24);
+	sub_wire2(0, 25)    <= sub_wire9(25);
+	sub_wire2(0, 26)    <= sub_wire9(26);
+	sub_wire2(0, 27)    <= sub_wire9(27);
+	sub_wire2(0, 28)    <= sub_wire9(28);
+	sub_wire2(0, 29)    <= sub_wire9(29);
+	sub_wire2(0, 30)    <= sub_wire9(30);
+	sub_wire2(0, 31)    <= sub_wire9(31);
+
+	LPM_MUX_component : LPM_MUX
+	GENERIC MAP (
+		lpm_size => 8,
+		lpm_type => "LPM_MUX",
+		lpm_width => 32,
+		lpm_widths => 3
+	)
+	PORT MAP (
+		data => sub_wire2,
+		sel => sel,
+		result => sub_wire0
+	);
+
+
+
+END SYN;
+
+-- ============================================================
+-- CNX file retrieval info
+-- ============================================================
+-- Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
+-- Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
+-- Retrieval info: PRIVATE: new_diagram STRING "1"
+-- Retrieval info: LIBRARY: lpm lpm.lpm_components.all
+-- Retrieval info: CONSTANT: LPM_SIZE NUMERIC "8"
+-- Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MUX"
+-- Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "32"
+-- Retrieval info: CONSTANT: LPM_WIDTHS NUMERIC "3"
+-- Retrieval info: USED_PORT: data0x 0 0 32 0 INPUT NODEFVAL "data0x[31..0]"
+-- Retrieval info: USED_PORT: data1x 0 0 32 0 INPUT NODEFVAL "data1x[31..0]"
+-- Retrieval info: USED_PORT: data2x 0 0 32 0 INPUT NODEFVAL "data2x[31..0]"
+-- Retrieval info: USED_PORT: data3x 0 0 32 0 INPUT NODEFVAL "data3x[31..0]"
+-- Retrieval info: USED_PORT: data4x 0 0 32 0 INPUT NODEFVAL "data4x[31..0]"
+-- Retrieval info: USED_PORT: data5x 0 0 32 0 INPUT NODEFVAL "data5x[31..0]"
+-- Retrieval info: USED_PORT: data6x 0 0 32 0 INPUT NODEFVAL "data6x[31..0]"
+-- Retrieval info: USED_PORT: data7x 0 0 32 0 INPUT NODEFVAL "data7x[31..0]"
+-- Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
+-- Retrieval info: USED_PORT: sel 0 0 3 0 INPUT NODEFVAL "sel[2..0]"
+-- Retrieval info: CONNECT: @data 1 0 32 0 data0x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 1 32 0 data1x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 2 32 0 data2x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 3 32 0 data3x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 4 32 0 data4x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 5 32 0 data5x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 6 32 0 data6x 0 0 32 0
+-- Retrieval info: CONNECT: @data 1 7 32 0 data7x 0 0 32 0
+-- Retrieval info: CONNECT: @sel 0 0 3 0 sel 0 0 3 0
+-- Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_8x32.vhd TRUE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_8x32.inc FALSE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_8x32.cmp TRUE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_8x32.bsf FALSE
+-- Retrieval info: GEN_FILE: TYPE_NORMAL mux_8x32_inst.vhd FALSE
+-- Retrieval info: LIB_FILE: lpm
diff --git a/cpu/sumeru_constants.vhd b/cpu/sumeru_constants.vhd
index 4bf16b3..be84570 100644
--- a/cpu/sumeru_constants.vhd
+++ b/cpu/sumeru_constants.vhd
@@ -8,24 +8,27 @@ constant IVEC_TIMER:            std_logic_vector(3 downto 0) := "0001";
 constant IVEC_UART0_TX:         std_logic_vector(3 downto 0) := "0010";
 constant IVEC_UART0_RX:         std_logic_vector(3 downto 0) := "0011";
 
-constant CSR_REG_GPIO_DIR:      std_logic_vector(11 downto 0) := x"881";
-constant CSR_REG_GPIO_OUTPUT:   std_logic_vector(11 downto 0) := x"882";
-constant CSR_REG_GPIO_INPUT:    std_logic_vector(11 downto 0) := x"CC1";
- 
-constant CSR_REG_TIMER_CTRL:    std_logic_vector(11 downto 0) := x"884";
-constant CSR_REG_TIMER_VALUE:   std_logic_vector(11 downto 0) := x"CC2";
-
 constant CSR_REG_CTR_CYCLE:     std_logic_vector(11 downto 0) := x"C00";
 constant CSR_REG_CTR_CYCLE_H:   std_logic_vector(11 downto 0) := x"C80";
+constant CSR_REG_CTR_TIME:      std_logic_vector(11 downto 0) := x"C01";
+constant CSR_REG_CTR_TIME_H:    std_logic_vector(11 downto 0) := x"C81";
 constant CSR_REG_CTR_INSTRET:   std_logic_vector(11 downto 0) := x"C02";
-constant CSR_REG_CTR_INSTRET_H: std_logic_vector(11 downto 0):= x"C82";
+constant CSR_REG_CTR_INSTRET_H: std_logic_vector(11 downto 0) := x"C82";
+
+constant CSR_REG_CTX_PCSAVE:    std_logic_vector(11 downto 0) := x"C03";
+constant CSR_REG_CTX_PCSWITCH:  std_logic_vector(11 downto 0) := x"C83";
 
-constant CSR_REG_CTX_PCSAVE:    std_logic_vector(11 downto 0) := x"CC0";
-constant CSR_REG_CTX_PCSWITCH:  std_logic_vector(11 downto 0) := x"880";
-constant CSR_REG_SWITCH:        std_logic_vector(11 downto 0) := x"9C0";
-constant CSR_REG_IVECTOR_ADDR:  std_logic_vector(11 downto 0) := x"9C1";
+constant CSR_REG_GPIO_DIR:      std_logic_vector(11 downto 0) := x"800";
+constant CSR_REG_GPIO_INPUT:    std_logic_vector(11 downto 0) := x"801";
+constant CSR_REG_GPIO_OUTPUT:   std_logic_vector(11 downto 0) := x"802";
+
+constant CSR_REG_UART0_RX:      std_logic_vector(11 downto 0) := x"900";
+constant CSR_REG_UART0_TX:      std_logic_vector(11 downto 0) := x"901";
+ 
+constant CSR_REG_TIMER_CTRL:    std_logic_vector(11 downto 0) := x"A00";
+constant CSR_REG_TIMER_VALUE:   std_logic_vector(11 downto 0) := x"A01";
 
-constant CSR_REG_UART0_RX:      std_logic_vector(11 downto 0) := x"888";
-constant CSR_REG_UART0_TX:      std_logic_vector(11 downto 0) := x"889";
+constant CSR_REG_SWITCH:        std_logic_vector(11 downto 0) := x"B00";
+constant CSR_REG_IVECTOR_ADDR:  std_logic_vector(11 downto 0) := x"B01";
 
 end package;
diff --git a/sw/include/machine/constants.h b/sw/include/machine/constants.h
index 65e52ab..134403b 100644
--- a/sw/include/machine/constants.h
+++ b/sw/include/machine/constants.h
@@ -1,25 +1,28 @@
 #ifndef __SUMERU_CONSTANTS_H
 #define __SUMERU_CONSTANTS_H
 
-#define CSR_REG_GPIO_DIR                0x881
-#define CSR_REG_GPIO_OUT                0x882
-#define CSR_REG_GPIO_INPUT              0xCC1
-
-#define CSR_REG_TIMER_CTRL              0x884
-#define CSR_REG_TIMER_VALUE             0xCC2
-
 #define CSR_REG_CTR_CYCLE               0xC00
 #define CSR_REG_CTR_CYCLE_H             0xC80
+#define CSR_REG_CTR_TIME                0xC01
+#define CSR_REG_CTR_TIME_H              0xC81
 #define CSR_REG_CTR_INSTRET             0xC02
 #define CSR_REG_CTR_INSTRET_H           0xC82
 
-#define CSR_REG_CTX_PCSAVE              0xCC0
-#define CSR_REG_CTX_PCSWITCH            0x880
-#define CSR_REG_SWITCH                  0x9C0
-#define CSR_REG_IVECTOR_ADDR            0x9C1
+#define CSR_REG_CTX_PCSAVE              0xC03
+#define CSR_REG_CTX_PCSWITCH            0xC83
+
+#define CSR_REG_GPIO_DIR                0x800
+#define CSR_REG_GPIO_INPUT              0x801
+#define CSR_REG_GPIO_OUT                0x802
+
+#define CSR_REG_UART0_RX                0x900
+#define CSR_REG_UART0_TX                0x901
+
+#define CSR_REG_TIMER_CTRL              0xA00
+#define CSR_REG_TIMER_VALUE             0xA01
 
-#define CSR_REG_UART0_RX                0x888
-#define CSR_REG_UART0_TX                0x889
+#define CSR_REG_SWITCH                  0xB00
+#define CSR_REG_IVECTOR_ADDR            0xB01
 
 #define INTR_ID_TIMER                   0x1
 #define INTR_ID_UART0_TX                0x2
